// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SPBackend.Data;

#nullable disable

namespace SPBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251018162625_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SPBackend.Models.Consumption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("Amperage")
                        .HasColumnType("bigint");

                    b.Property<long>("PlugId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlugId");

                    b.ToTable("Consumptions");
                });

            modelBuilder.Entity("SPBackend.Models.DeviceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DeviceTypes");
                });

            modelBuilder.Entity("SPBackend.Models.Household", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Households");
                });

            modelBuilder.Entity("SPBackend.Models.MainsLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("Amperage")
                        .HasColumnType("bigint");

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<long>("PowerSourceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Voltage")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("PowerSourceId");

                    b.ToTable("MainsLogs");
                });

            modelBuilder.Entity("SPBackend.Models.Plug", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DeviceTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsConstant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOn")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("Timeout")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("RoomId");

                    b.ToTable("Plugs");
                });

            modelBuilder.Entity("SPBackend.Models.PlugControl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("PlugId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("SetStatus")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PlugId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("PlugControls");
                });

            modelBuilder.Entity("SPBackend.Models.PowerSource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxCapacity")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HouseholdId");

                    b.ToTable("PowerSources");
                });

            modelBuilder.Entity("SPBackend.Models.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HouseholdId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("SPBackend.Models.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("SPBackend.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("HouseholdId")
                        .HasColumnType("bigint");

                    b.Property<string>("KeyCloakId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HouseholdId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SPBackend.Models.Consumption", b =>
                {
                    b.HasOne("SPBackend.Models.Plug", "Plug")
                        .WithMany("Consumptions")
                        .HasForeignKey("PlugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plug");
                });

            modelBuilder.Entity("SPBackend.Models.MainsLog", b =>
                {
                    b.HasOne("SPBackend.Models.Household", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPBackend.Models.PowerSource", "PowerSource")
                        .WithMany("Mains")
                        .HasForeignKey("PowerSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Household");

                    b.Navigation("PowerSource");
                });

            modelBuilder.Entity("SPBackend.Models.Plug", b =>
                {
                    b.HasOne("SPBackend.Models.DeviceType", "DeviceType")
                        .WithMany("Plugs")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPBackend.Models.Room", "Room")
                        .WithMany("Plugs")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceType");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("SPBackend.Models.PlugControl", b =>
                {
                    b.HasOne("SPBackend.Models.Plug", "Plug")
                        .WithMany("PlugControls")
                        .HasForeignKey("PlugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPBackend.Models.Schedule", "Schedule")
                        .WithMany("PlugControls")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plug");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("SPBackend.Models.PowerSource", b =>
                {
                    b.HasOne("SPBackend.Models.Household", "Household")
                        .WithMany("PowerSources")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("SPBackend.Models.Room", b =>
                {
                    b.HasOne("SPBackend.Models.Household", "Household")
                        .WithMany("Rooms")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("SPBackend.Models.User", b =>
                {
                    b.HasOne("SPBackend.Models.Household", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Household");
                });

            modelBuilder.Entity("SPBackend.Models.DeviceType", b =>
                {
                    b.Navigation("Plugs");
                });

            modelBuilder.Entity("SPBackend.Models.Household", b =>
                {
                    b.Navigation("PowerSources");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("SPBackend.Models.Plug", b =>
                {
                    b.Navigation("Consumptions");

                    b.Navigation("PlugControls");
                });

            modelBuilder.Entity("SPBackend.Models.PowerSource", b =>
                {
                    b.Navigation("Mains");
                });

            modelBuilder.Entity("SPBackend.Models.Room", b =>
                {
                    b.Navigation("Plugs");
                });

            modelBuilder.Entity("SPBackend.Models.Schedule", b =>
                {
                    b.Navigation("PlugControls");
                });
#pragma warning restore 612, 618
        }
    }
}
